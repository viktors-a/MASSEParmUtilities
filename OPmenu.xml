<?xml version="1.0" encoding="UTF-8"?>
<menuDocument>
    <menu>
        <subMenu id="MASSE_OP_parm_menu">
        <label>MASSE tools</label>
        <insertAfter>opmenu.parms_and_channels_menu</insertAfter>

                     <!-- PASTE UNREAL material -->
            <scriptItem id="MASSE_paste_unreal_material">
            <label>Paste unreal material</label>
                <scriptCode>
<![CDATA[
def runLater():
    from MASSE_tools import parm_utils as MASSE_parm_utils
    MASSE_parm_utils.paste_unreal_reference(kwargs,"primitive", "unreal_material")
import hdefereval
hdefereval.executeDeferred(runLater)
]]>
                </scriptCode>
            </scriptItem>


            <!-- PASTE UNREAL INSTANCE -->
            <scriptItem id="MASSE_paste_unreal_instance">
            <label>Paste unreal instance</label>
                <scriptCode>
<![CDATA[
def runLater():
    from MASSE_tools import parm_utils as MASSE_parm_utils
    MASSE_parm_utils.paste_unreal_reference(kwargs,"point", "unreal_instance")
import hdefereval
hdefereval.executeDeferred(runLater)
]]>
                </scriptCode>
            </scriptItem>

<separatorItem/>
<!-- PARM JUMP TO -->
            <scriptItem id="MASSE_split_by_unique_string">
            <label>Split by unique attibute string</label>
                <expression><![CDATA[
selected_nodes = hou.selectedNodes()
for node in selected_nodes:
    if not isinstance(node, hou.SopNode):
        return False
else:
    return True
]]>
                </expression>
                <scriptCode>
<![CDATA[
def runLater():
    from MASSE_tools import parm_utils as MASSE_parm_utils
    MASSE_parm_utils.spilt_by_unique_attrib(kwargs)
import hdefereval
hdefereval.executeDeferred(runLater)
]]>
                </scriptCode>
            </scriptItem>



<separatorItem/>

<!-- PARM JUMP TO -->
            <scriptItem id="MASSE_attrib_based_on_node_name">
            <label>Attribute from node name</label>
                <expression><![CDATA[
selected_nodes = hou.selectedNodes()
for node in selected_nodes:
    if not isinstance(node, hou.SopNode):
        return False
else:
    return True
]]>
                </expression>
                <scriptCode>
<![CDATA[
def runLater():

    from importlib import reload
    from MASSE_tools import parm_utils as MASSE_parm_utils
    reload(MASSE_parm_utils)
    MASSE_parm_utils.attrib_from_node_name(kwargs)
import hdefereval
hdefereval.executeDeferred(runLater)
]]>
                </scriptCode>
            </scriptItem>

<separatorItem/>



<!-- ADD NODES TO OBJECT MERGE -->
            <scriptItem id = "MASSE_object_merge_sel_nodes">
                <label>Object merge selected nodes</label>
                <expression><![CDATA[
node = kwargs["node"]
selected_nodes = [sel_node for sel_node in hou.selectedNodes() if sel_node != node]
if node.type().name() == "object_merge" and len(selected_nodes) > 0:
    return True
return False
]]>
                </expression>
                <scriptCode><![CDATA[
from MASSE_tools import parm_utils as MASSE_parm_utils
MASSE_parm_utils.add_nodes_to_object_merge(kwargs)
]]>             </scriptCode>
            </scriptItem>



<!-- PARM MENUS -->
<!-- PARM SET ENV -->
            <scriptItem id="MASSE_putenv">
            <label>Set as parm node</label>
                <scriptCode>
<![CDATA[
import hou
node_path = kwargs['node'].path()
hou.putenv("MASSE_PARM_NODE", node_path)
]]>
                </scriptCode>
            </scriptItem>
<!-- PARM JUMP TO -->
            <scriptItem id="MASSE_locate_parm_env">
            <expression>hou.getenv("MASSE_PARM_NODE")!=None</expression>
            <label>Locate parm node</label>
                <scriptCode>
<![CDATA[
def runLater():
    from MASSE_tools import parm_utils as MASSE_parm_utils
    active_path = hou.getenv("MASSE_PARM_NODE")
    MASSE_parm_utils.parmUtils.jump_to_node(env= active_path, parm_type= "parm")
import hdefereval
hdefereval.executeDeferred(runLater)
]]>
                </scriptCode>
            </scriptItem>

<separatorItem/>

<!-- SET MULTIPARM COUNTER -->
            <scriptItem id = "MASSE_set_multiparm_counter">
                <label>Set as multiparm counter</label>
                <expression><![CDATA[
node = kwargs["node"]
if node.type().name()=="block_begin":
    if node.parm("method").evalAsString()=="metadata":
        return True
return False
]]>
                </expression>
                <scriptCode><![CDATA[
from MASSE_tools import parm_utils as MASSE_parm_utils
counter_node = kwargs["node"]
node_path = counter_node.path()
hou.putenv("MASSE_MULTIPARM_COUNTER_NODE", node_path)
mp_folder = hou.getenv("MASSE_MULTIPARM_FOLDER")
if mp_folder:
    mp_folder = hou.parm(mp_folder)
    MASSE_parm_utils.MultiparmUtils.create_multiparm_counter_expr(counter_node, mp_folder)
]]>             </scriptCode>
            </scriptItem>


<!-- JUMP TO MULTIPARM COUNTER -->

            <scriptItem id = "MASSE_locate_multiparm_counter">
                <label>Locate  multiparm counter node</label>
<expression>
<![CDATA[
if hou.getenv("MASSE_MULTIPARM_COUNTER_NODE"):
    return True
return False
]]>
</expression>
                <scriptCode><![CDATA[
def runLater():
    from MASSE_tools import parm_utils as MASSE_parm_utils
    active_path = hou.getenv("MASSE_MULTIPARM_COUNTER_NODE")
    MASSE_parm_utils.parmUtils.jump_to_node(env= active_path, parm_type= "multiparm counter")
import hdefereval
hdefereval.executeDeferred(runLater)
]]>             </scriptCode>
            </scriptItem>

<!-- JUMP TO FOLDER NODE -->
            <scriptItem id = "MASSE_locate_multiparm_folder">
                <label>Locate multiparm folder node</label>
<expression>
<![CDATA[
if hou.getenv("MASSE_MULTIPARM_FOLDER"):
    return True
return False
]]>
</expression>
                <scriptCode><![CDATA[
def runLater():
    from MASSE_tools import parm_utils as MASSE_parm_utils
    active_path = hou.parm(hou.getenv("MASSE_MULTIPARM_FOLDER")).node().path()
    MASSE_parm_utils.parmUtils.jump_to_node(env= active_path, parm_type= "multiparm folder node")
import hdefereval
hdefereval.executeDeferred(runLater)
]]>             </scriptCode>
            </scriptItem>


            <scriptItem id = "MASSE_spare_counter_reference">
                <label>Add spare input</label>
<expression>
<![CDATA[
if len(hou.selectedNodes()) == 2:
    return True
return False
]]>
</expression>
                <scriptCode><![CDATA[
def runLater():
    from MASSE_tools import parm_utils as MASSE_parm_utils
    MASSE_parm_utils.MultiparmUtils.add_spare_input(kwargs)
import hdefereval
hdefereval.executeDeferred(runLater)
]]>             </scriptCode>
            </scriptItem>

<!-- RENAME SELECTED NODES -->

            <scriptItem id = "MASSE_rename_selected_nodes">
                <label>Rename selected nodes</label>
                <scriptCode><![CDATA[
def runLater():
    from MASSE_tools import parm_utils as MASSE_parm_utils
    MASSE_parm_utils.parmUtils.rename_selected_node()
import hdefereval
hdefereval.executeDeferred(runLater)
]]>             </scriptCode>
            </scriptItem>

<!-- COLOR NODES -->

            <scriptItem id = "MASSE_color_nodes">
                <label>Color selected nodes</label>
                <scriptCode><![CDATA[
def runLater():
    from MASSE_tools import parm_utils as MASSE_parm_utils
    MASSE_parm_utils.color_nodes()
import hdefereval
hdefereval.executeDeferred(runLater)
]]>             </scriptCode>
            </scriptItem>

<!-- SET WEDGE NODE  -->

            <scriptItem id = "MASSE_set_wedge">
                <label>Set as wedge node</label>
<expression>
<![CDATA[
if kwargs["node"].type().name()=="wedge":
    return True
return False
]]>
</expression>
                <scriptCode><![CDATA[
def runLater():
    import hou
    hou.putenv("MASSE_WEDGE_NODE", kwargs["node"].path())
import hdefereval
hdefereval.executeDeferred(runLater)
]]>             </scriptCode>
            </scriptItem>
<!--EDIT HDA SECTIONS-->
            <subMenu id = "MASSE_open_with_editor_node">
            <label>Edit extra sections</label>
            <context>
                <expression>
					<![CDATA[
try:
  import os
  if os.environ.get("HOUDINI_EXPR_DISABLE_SECTIONS") == "1":
    return False
  from HoudiniExprEditor import ParmWatcher
  return len(ParmWatcher.get_extra_file_scripts(kwargs["node"])) >0
except Exception as e:
  return False]]>
                </expression>
            </context>
                <scriptMenuStripDynamic id="MASSE_editors_node">
                    <contentsScriptCode><![CDATA[
from MASSE_tools import parm_utils as MASSE_parm_utils
return MASSE_parm_utils.parmUtils.menu_items_from_json_key("externalEditors")
            ]]>
                    </contentsScriptCode>
                     <scriptCode><![CDATA[
import os
from HoudiniExprEditor import ParmWatcher
try:
  reload(ParmWatcher)
except NameError:
  from importlib import reload
  reload(ParmWatcher)
editor_path = kwargs["selectedtoken"]
os.environ["EDITOR"] = editor_path
ParmWatcher.add_watcher_to_section(kwargs["node"])
del os.environ["EDITOR"]
                    ]]></scriptCode>
                </scriptMenuStripDynamic>
            </subMenu>
        </subMenu>
    </menu>
</menuDocument>
