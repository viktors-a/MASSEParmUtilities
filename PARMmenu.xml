<?xml version="1.0" encoding="UTF-8"?>
<menuDocument>
    <menu>
        <subMenu id = "MASSE_PARMmenu_utils">
        <insertAfter>expression_menu</insertAfter>
        <label>MASSE Parm Utils</label>


            <scriptItem id = "MASSE_spare_parm">
                <label>Set to spare parameter</label>
                <expression><![CDATA[
if hou.getenv("MASSE_PARM_NODE"):
    return True
else:
    return False
]]>
                </expression>

                <scriptCode><![CDATA[
def runLater():
    import MASSE_parm_utils
    MASSE_parm_utils.parmUtils(kwargs).createRelativeReference(assign_to_definition=False)
import hdefereval
hdefereval.executeDeferred(runLater)
        ]]>     </scriptCode>
            </scriptItem>


            <scriptItem id = "MASSE_hda_definition">
                <label>Set to HDA definition</label>
                <expression><![CDATA[
active_path = hou.getenv("MASSE_PARM_NODE")
if hou.node(active_path):
    is_hda = hou.node(active_path).type().definition()
    if is_hda:
        return True
return False
]]>
                </expression>
                <scriptCode><![CDATA[
def runLater():
    import MASSE_parm_utils
    MASSE_parm_utils.parmUtils(kwargs).createRelativeReference(assign_to_definition=True)
import hdefereval
hdefereval.executeDeferred(runLater)
]]>             </scriptCode>
            </scriptItem>


            <scriptItem id = "MASSE_remove_parm">
                <label>Remove parm</label>
                <expression><![CDATA[
if not isinstance(kwargs["parms"][0].parmTemplate(), hou.FolderSetParmTemplate):
    return True
else:
    return False
]]>
                </expression>
                <scriptCode><![CDATA[
def runLater():
    import MASSE_parm_utils
    MASSE_parm_utils.parmUtils(kwargs).deleteParm()
import hdefereval
hdefereval.executeDeferred(runLater)

]]>             </scriptCode>
            </scriptItem>

<separatorItem/>

<!-- SET MULTIPARM COUNTER -->
            <scriptItem id = "MASSE_multiparm_parm">
                <label>Set as multiparm</label>
<expression>
<![CDATA[
if hou.getenv("MASSE_MULTIPARM_FOLDER"):
    mp_parm = hou.parm(hou.getenv("MASSE_MULTIPARM_FOLDER"))
    if mp_parm:
        parm_node = kwargs["parms"][0].node()
        mp_node = mp_parm.node()
        if mp_node != parm_node:
            return True
return False
]]>
</expression>
                <scriptCode><![CDATA[
def runLater():
    import MASSE_parm_utils
    MASSE_parm_utils.MultiparmUtils(kwargs).createMultiparmReference()
import hdefereval
hdefereval.executeDeferred(runLater)
]]>             </scriptCode>
            </scriptItem>

<!-- SET MULTIPARM FOLDER -->
            <scriptItem id = "MASSE_set_multiparm_folder">
                <label>Set as multiparm folder</label>
<expression><![CDATA[
parm_temp = kwargs["parms"][0].parmTemplate()
if isinstance(parm_temp, hou.FolderParmTemplate):
    if not parm_temp.isActualFolder():
        return True
return False
]]></expression>
                <scriptCode><![CDATA[
import MASSE_parm_utils
mp_folder = kwargs["parms"][0]
parm_path = mp_folder.path()
hou.putenv("MASSE_MULTIPARM_FOLDER", parm_path)
# set multistartoffset to 0, to make sure its in sync with multiparm iterations attribute
MASSE_parm_utils.MultiparmUtils.setMultiParmFirstInstance(mp_folder)
mp_counter = hou.getenv("MASSE_MULTIPARM_COUNTER_NODE")
# if counter node variable is present, create expression referencing count
if mp_counter:
    conter_node = hou.node(mp_counter)
    MASSE_parm_utils.MultiparmUtils.createMultiParmCounterExpr(conter_node, mp_folder)

]]>             </scriptCode>
            </scriptItem>

<!-- CREATE SPARE PARMS -->
            <scriptItem id = "MASSE_new_spare_parm_float_5_5">
                <label>Create spare parm FLOAT [-5|5]</label>
                <scriptCode><![CDATA[
import MASSE_parm_utils
MASSE_parm_utils.parmUtils.createSpareParmFromExpression(kwargs["parms"],hou.FloatParmTemplate,min=-5,max=5)

]]>             </scriptCode>
            </scriptItem>


            <scriptItem id = "MASSE_new_spare_parm_float_1_1">
                <label>Create spare parm FLOAT [-1|1]</label>
                <scriptCode><![CDATA[
import MASSE_parm_utils
MASSE_parm_utils.parmUtils.createSpareParmFromExpression(kwargs["parms"],hou.FloatParmTemplate,min=-1,max=1)

]]>             </scriptCode>
            </scriptItem>

            <scriptItem id = "MASSE_new_spare_parm_float_0_1">
                <label>Create spare parm FLOAT [0-1]</label>
                <scriptCode><![CDATA[
import MASSE_parm_utils
MASSE_parm_utils.parmUtils.createSpareParmFromExpression(kwargs["parms"],hou.FloatParmTemplate,min=0,max=1)

]]>             </scriptCode>
            </scriptItem>

            <scriptItem id = "MASSE_new_spare_parm_float_0_10">
                <label>Create spare parm FLOAT [0|10]</label>
                <scriptCode><![CDATA[
import MASSE_parm_utils
MASSE_parm_utils.parmUtils.createSpareParmFromExpression(kwargs["parms"],hou.FloatParmTemplate,min=0,max=10)

]]>             </scriptCode>
            </scriptItem>

<separatorItem/>

            <scriptItem id = "MASSE_new_spare_parm_int_0_100">
                <label>Create spare parm INT [0-10]</label>
                <scriptCode><![CDATA[
import MASSE_parm_utils
MASSE_parm_utils.parmUtils.createSpareParmFromExpression(kwargs["parms"],hou.IntParmTemplate,min=0,max=10)

]]>             </scriptCode>
            </scriptItem>


            <scriptItem id = "MASSE_new_spare_parm_int_0_10">
                <label>Create spare parm INT [0-100]</label>
                <scriptCode><![CDATA[
import MASSE_parm_utils
MASSE_parm_utils.parmUtils.createSpareParmFromExpression(kwargs["parms"],hou.IntParmTemplate,min=0,max=100)

]]>             </scriptCode>
            </scriptItem>
<separatorItem/>

            <scriptItem id = "MASSE_new_spare_parm_string">
                <label>Create spare parm STRING</label>
                <scriptCode><![CDATA[
import MASSE_parm_utils
MASSE_parm_utils.parmUtils.createSpareParmFromExpression(kwargs["parms"],hou.StringParmTemplate)

]]>             </scriptCode>
            </scriptItem>

<separatorItem/>

            <scriptItem id = "MASSE_change_range">
                <label>Change spare parm range</label>
                <scriptCode><![CDATA[
import MASSE_parm_utils
MASSE_parm_utils.parmUtils.changeRange(kwargs["parms"])

]]>             </scriptCode>
            </scriptItem>

<separatorItem/>

<!-- Jump to parm reference node, ctrlclick to zoom to selection -->
            <scriptItem id = "MASSE_referencing_parm">
                <label>Node referencing this parm</label>
<expression>
<![CDATA[
if kwargs["parms"][0].parmsReferencingThis():
    return True
return False
]]>
</expression>
                <scriptCode><![CDATA[
def runLater():
    import MASSE_parm_utils
    ref_node = kwargs["parms"][0].parmsReferencingThis()[-1].node()
    network_editor = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if network_editor:
        network_editor.setCurrentNode(ref_node)
        if kwargs["ctrlclick"]:
            network_editor.homeToSelection()
        if kwargs["altclick"]:
            ref_node.setGenericFlag(hou.nodeFlag.Display, 1)
import hdefereval
hdefereval.executeDeferred(runLater)
]]>             </scriptCode>
                </scriptItem>
<!-- FOO MENU TO RUN TEST -->
            <!-- </scriptItem>
            <scriptItem id = "masse_test">
                <label>Test_script</label>
                <scriptCode><![CDATA[
def runLater():
    import MASSE_parm_utils
    import importlib
    importlib.reload(MASSE_parm_utils)
    MASSE_parm_utils.MultiparmUtils.createMultiparmExpression(kwargs)
import hdefereval
hdefereval.executeDeferred(runLater)
]]>             </scriptCode>
            </scriptItem> -->
        </subMenu>
    </menu>
</menuDocument>

