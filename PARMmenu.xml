<?xml version="1.0" encoding="UTF-8"?>
<menuDocument>
    <menu>
<!--       PASTE EPRESSION REPLACE -->
    <subMenu id="MASSE_paste_expression">
    <insertAfter>expression_menu</insertAfter>
    <label>MASSE Paste Expression</label>
    <scriptMenuStripDynamic id="MASSE_json_expressions">
        <contentsScriptCode><![CDATA[
from MASSE_tools import parm_utils as MASSE_parm_utils
return MASSE_parm_utils.parmUtils.menu_items_from_json_key("parmExpressions")
        ]]></contentsScriptCode>
        <scriptCode><![CDATA[
def runLater():
    from MASSE_tools import parm_utils as MASSE_parm_utils
    MASSE_parm_utils.parmUtils(kwargs).paste_expression_from_json()
import hdefereval
hdefereval.executeDeferred(runLater)
        ]]></scriptCode>
    </scriptMenuStripDynamic>
</subMenu>
        <subMenu id = "MASSE_PARMmenu_utils">
        <insertAfter>expression_menu</insertAfter>
        <label>MASSE Parm Utils</label>


            <scriptItem id = "MASSE_spare_parm">
                <label>Add to parm node(spare)</label>
                <expression><![CDATA[
if hou.getenv("MASSE_PARM_NODE"):
    return True
else:
    return False
]]>
                </expression>

                <scriptCode><![CDATA[
def runLater():
    from MASSE_tools import parm_utils as MASSE_parm_utils
    MASSE_parm_utils.parmUtils(kwargs).create_relative_parm_reference(assign_to_definition=False)
import hdefereval
hdefereval.executeDeferred(runLater)
        ]]>     </scriptCode>
            </scriptItem>


            <scriptItem id = "MASSE_hda_definition">
                <label>Add to parm node(HDA)</label>
                <expression><![CDATA[
active_path = hou.getenv("MASSE_PARM_NODE")
if hou.node(active_path):
    is_hda = hou.node(active_path).type().definition()
    if is_hda:
        return True
return False
]]>
                </expression>
                <scriptCode><![CDATA[
def runLater():
    from MASSE_tools import parm_utils as MASSE_parm_utils
    MASSE_parm_utils.parmUtils(kwargs).create_relative_parm_reference(assign_to_definition=True)
import hdefereval
hdefereval.executeDeferred(runLater)
]]>             </scriptCode>
            </scriptItem>


<!--REFERENECE CURRENT PARM NODE PARM-->
            <scriptItem id = "MASSE_ref_cur_node_parm">
                <label>Reference current parm node parm</label>
                <expression><![CDATA[
if hou.node(hou.getenv("MASSE_PARM_NODE")):
    return True
else:
    return False
]]>
                </expression>

                <scriptCode><![CDATA[
def runLater():
    from MASSE_tools import parm_utils as MASSE_parm_utils
    MASSE_parm_utils.parmUtils(kwargs).paste_cur_node_parm_ref()
import hdefereval
hdefereval.executeDeferred(runLater)
        ]]>     </scriptCode>
            </scriptItem>



            <scriptItem id = "MASSE_remove_parm">
                <label>Remove parm</label>
                <expression><![CDATA[
if not isinstance(kwargs["parms"][0].parmTemplate(), hou.FolderSetParmTemplate):
    return True
else:
    return False
]]>
                </expression>
                <scriptCode><![CDATA[
def runLater():
    from MASSE_tools import parm_utils as MASSE_parm_utils
    MASSE_parm_utils.parmUtils(kwargs).delete_parm()
import hdefereval
hdefereval.executeDeferred(runLater)

]]>             </scriptCode>
            </scriptItem>

<separatorItem/>

<!-- SET MULTIPARM COUNTER -->
            <scriptItem id = "MASSE_multiparm_parm">
                <label>Set as multiparm</label>
<expression>
<![CDATA[
if hou.getenv("MASSE_MULTIPARM_FOLDER"):
    mp_parm = hou.parm(hou.getenv("MASSE_MULTIPARM_FOLDER"))
    if mp_parm:
        parm_node = kwargs["parms"][0].node()
        mp_node = mp_parm.node()
        if mp_node != parm_node:
            return True
return False
]]>
</expression>
                <scriptCode><![CDATA[
def runLater():
    from MASSE_tools import parm_utils as MASSE_parm_utils
    MASSE_parm_utils.MultiparmUtils(kwargs).create_multiparm_reference()
import hdefereval
hdefereval.executeDeferred(runLater)
]]>             </scriptCode>
            </scriptItem>

<!-- SET MULTIPARM FOLDER -->
            <scriptItem id = "MASSE_set_multiparm_folder">
                <label>Set as multiparm folder</label>
<expression><![CDATA[
parm_temp = kwargs["parms"][0].parmTemplate()
if isinstance(parm_temp, hou.FolderParmTemplate):
    if not parm_temp.isActualFolder():
        return True
return False
]]></expression>
                <scriptCode><![CDATA[
from MASSE_tools import parm_utils as MASSE_parm_utils
mp_folder = kwargs["parms"][0]
parm_path = mp_folder.path()
hou.putenv("MASSE_MULTIPARM_FOLDER", parm_path)
# set multistartoffset to 0, to make sure its in sync with multiparm iterations attribute
MASSE_parm_utils.MultiparmUtils.set_multiparm_init_counter_index(mp_folder)
mp_counter = hou.getenv("MASSE_MULTIPARM_COUNTER_NODE")
# if counter node variable is present, create expression referencing count
if mp_counter:
    conter_node = hou.node(mp_counter)
    MASSE_parm_utils.MultiparmUtils.create_multiparm_counter_expr(conter_node, mp_folder)

]]>             </scriptCode>
            </scriptItem>

<!-- CREATE SPARE PARMS -->
            <scriptItem id = "MASSE_new_spare_parm_float_5_5">
                <label>Create spare parm FLOAT [-5|5]</label>
                <scriptCode><![CDATA[
from MASSE_tools import parm_utils as MASSE_parm_utils
MASSE_parm_utils.parmUtils.create_spare_parm_from_expression(kwargs["parms"],hou.FloatParmTemplate,min=-5,max=5)

]]>             </scriptCode>
            </scriptItem>


            <scriptItem id = "MASSE_new_spare_parm_float_1_1">
                <label>Create spare parm FLOAT [-1|1]</label>
                <scriptCode><![CDATA[
from MASSE_tools import parm_utils as MASSE_parm_utils
MASSE_parm_utils.parmUtils.create_spare_parm_from_expression(kwargs["parms"],hou.FloatParmTemplate,min=-1,max=1)

]]>             </scriptCode>
            </scriptItem>

            <scriptItem id = "MASSE_new_spare_parm_float_0_1">
                <label>Create spare parm FLOAT [0-1]</label>
                <scriptCode><![CDATA[
from MASSE_tools import parm_utils as MASSE_parm_utils
MASSE_parm_utils.parmUtils.create_spare_parm_from_expression(kwargs["parms"],hou.FloatParmTemplate,min=0,max=1)

]]>             </scriptCode>
            </scriptItem>

            <scriptItem id = "MASSE_new_spare_parm_float_0_10">
                <label>Create spare parm FLOAT [0|10]</label>
                <scriptCode><![CDATA[
from MASSE_tools import parm_utils as MASSE_parm_utils
MASSE_parm_utils.parmUtils.create_spare_parm_from_expression(kwargs["parms"],hou.FloatParmTemplate,min=0,max=10)

]]>             </scriptCode>
            </scriptItem>

<separatorItem/>

            <scriptItem id = "MASSE_new_spare_parm_int_0_100">
                <label>Create spare parm INT [0-10]</label>
                <scriptCode><![CDATA[
from MASSE_tools import parm_utils as MASSE_parm_utils
MASSE_parm_utils.parmUtils.create_spare_parm_from_expression(kwargs["parms"],hou.IntParmTemplate,min=0,max=10)

]]>             </scriptCode>
            </scriptItem>


            <scriptItem id = "MASSE_new_spare_parm_int_0_10">
                <label>Create spare parm INT [0-100]</label>
                <scriptCode><![CDATA[
from MASSE_tools import parm_utils as MASSE_parm_utils
MASSE_parm_utils.parmUtils.create_spare_parm_from_expression(kwargs["parms"],hou.IntParmTemplate,min=0,max=100)

]]>             </scriptCode>
            </scriptItem>
<separatorItem/>

            <scriptItem id = "MASSE_new_spare_parm_string">
                <label>Create spare parm STRING</label>
                <scriptCode><![CDATA[
from MASSE_tools import parm_utils as MASSE_parm_utils
MASSE_parm_utils.parmUtils.create_spare_parm_from_expression(kwargs["parms"],hou.StringParmTemplate)

]]>             </scriptCode>
            </scriptItem>

<separatorItem/>

            <scriptItem id = "MASSE_change_range">
                <label>Change spare parm range</label>
                <scriptCode><![CDATA[
from MASSE_tools import parm_utils as MASSE_parm_utils
MASSE_parm_utils.parmUtils.change_parm_range(kwargs["parms"])

]]>             </scriptCode>
            </scriptItem>

<separatorItem/>

<!-- Jump to parm reference node, ctrlclick to zoom to selection -->
            <scriptItem id = "MASSE_referencing_parm">
                <label>Node referencing this parm</label>
<expression>
<![CDATA[
if kwargs["parms"][0].parmsReferencingThis():
    return True
return False
]]>
</expression>
                <scriptCode><![CDATA[
def runLater():
    from MASSE_tools import parm_utils as MASSE_parm_utils
    ref_node = kwargs["parms"][0].parmsReferencingThis()[-1].node()
    network_editor = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if network_editor:
        network_editor.setCurrentNode(ref_node)
        if kwargs["ctrlclick"]:
            network_editor.homeToSelection()
        if kwargs["altclick"]:
            ref_node.setGenericFlag(hou.nodeFlag.Display, 1)
import hdefereval
hdefereval.executeDeferred(runLater)
]]>             </scriptCode>
                </scriptItem>
<!-- String replace with environment variable  -->
            <scriptItem id = "MASSE_string_replace">
                <label>Find environment variables in string</label>
<expression>
<![CDATA[
if isinstance(kwargs["parms"][0].eval(), str):
    return True
return False
]]>
</expression>
                <scriptCode><![CDATA[
def runLater():
    from MASSE_tools import parm_utils as MASSE_parm_utils
    MASSE_parm_utils.parmUtils.find_valid_env_in_string(kwargs)
import hdefereval
hdefereval.executeDeferred(runLater)
]]>             </scriptCode>
                </scriptItem>


            <scriptItem id = "MASSE_pdg_attribute_replace">
                <label>Get PDG attributes(replace)</label>
<expression>
<![CDATA[
import pdg
if pdg.workItem():
    return True
return False
]]>
</expression>
                <scriptCode><![CDATA[
def runLater():
    from MASSE_tools import parm_utils as MASSE_parm_utils
    MASSE_parm_utils.parmUtils(kwargs).create_pdg_attrib_expression(replace=True)
import hdefereval
hdefereval.executeDeferred(runLater)
]]>             </scriptCode>
                </scriptItem>

            <scriptItem id = "MASSE_pdg_attribute_append">
                <label>Get PDG attributes(append)</label>
<expression>
<![CDATA[
import pdg
if pdg.workItem():
    return True
return False
]]>
</expression>
                <scriptCode><![CDATA[
def runLater():
    from MASSE_tools import parm_utils as MASSE_parm_utils
    MASSE_parm_utils.parmUtils(kwargs).create_pdg_attrib_expression()
import hdefereval
hdefereval.executeDeferred(runLater)
]]>             </scriptCode>
                </scriptItem>


            <scriptItem id = "MASSE_pdg_tag_input">
                <label>Get PDG input tag</label>
<expression>
<![CDATA[
import pdg
work_item = pdg.workItem()
parm_type = kwargs["parms"][0].parmTemplate().type()
if work_item:
    if work_item.inputFiles and parm_type == hou.parmTemplateType.String:
        return True
return False
]]>
</expression>
                <scriptCode><![CDATA[
def runLater():
    from MASSE_tools import parm_utils as MASSE_parm_utils
    MASSE_parm_utils.parmUtils(kwargs).get_pdg_work_item_tags("inputFiles", "pdginput")
import hdefereval
hdefereval.executeDeferred(runLater)
]]>             </scriptCode>
                </scriptItem>

            <scriptItem id = "MASSE_pdg_tag_output">
                <label>Get PDG output tag</label>
<expression>
<![CDATA[
import pdg
work_item = pdg.workItem()
parm_type = kwargs["parms"][0].parmTemplate().type()
if work_item:
    if work_item.outputFiles and parm_type == hou.parmTemplateType.String:
        return True
return False
]]>
</expression>
                <scriptCode><![CDATA[
def runLater():
    from MASSE_tools import parm_utils as MASSE_parm_utils
    MASSE_parm_utils.parmUtils(kwargs).get_pdg_work_item_tags("outputFiles", "pdgoutput")
import hdefereval
hdefereval.executeDeferred(runLater)
]]>             </scriptCode>
                </scriptItem>

            <scriptItem id = "MASSE_add_to_wedge">
                <label>Add parm to wedge</label>
<expression>
<![CDATA[
import hou
if hou.getenv("MASSE_WEDGE_NODE"):
    return True
return False
]]>
</expression>
                <scriptCode><![CDATA[
def runLater():
    from MASSE_tools import parm_utils as MASSE_parm_utils
    MASSE_parm_utils.parmUtils(kwargs).add_parm_to_wedge()
import hdefereval
hdefereval.executeDeferred(runLater)
]]>             </scriptCode>
                </scriptItem>


            <scriptItem id = "MASSE_delete_all_keyframes">
                <label>Delete all keyframes</label>
<expression>
<![CDATA[
import hou
parms = kwargs["parms"]
for parm in parms:
    if parm.keyframes():
        return True
return False
]]>
</expression>
                <scriptCode><![CDATA[
def runLater():
    parms = kwargs["parms"]
    for parm in parms:
        if parm.keyframes():
            parm.deleteAllKeyframes()
import hdefereval
hdefereval.executeDeferred(runLater)
]]>             </scriptCode>
                </scriptItem>

<!--EDIT PARM IN EXTERNAL EDITOR-->
            <subMenu id = "MASSE_open_with_editor_parm">
            <label>Open with editor</label>
            <context>
                <expression>
<![CDATA[
try:
  from HoudiniExprEditor import ParmWatcher
  return ParmWatcher.is_valid_parm(kwargs["parms"][0])
except:
  return False
]]>
                </expression>
            </context>
                <scriptMenuStripDynamic id="MASSE_editors_parm">
                    <contentsScriptCode><![CDATA[
from MASSE_tools import parm_utils as MASSE_parm_utils
return MASSE_parm_utils.parmUtils.menu_items_from_json_key("externalEditors")
            ]]>
                    </contentsScriptCode>
                     <scriptCode><![CDATA[
import os
from HoudiniExprEditor import ParmWatcher
try:
  reload(ParmWatcher)
except NameError:
  from importlib import reload
  reload(ParmWatcher)
editor_path = kwargs["selectedtoken"]
os.environ["EDITOR"] = editor_path
ParmWatcher.add_watcher(kwargs["parms"][0])
del os.environ["EDITOR"]
                    ]]></scriptCode>
                </scriptMenuStripDynamic>
            </subMenu>
        </subMenu>
    </menu>

</menuDocument>

